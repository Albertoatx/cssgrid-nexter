.story {

  &__pictures {
    background-color: $color-primary;
    grid-column: full-start / col-end 4;
    background-image: linear-gradient(rgba($color-primary, .5), rgba($color-primary, .5)), 
      url(../img/back.jpg);
    background-size: cover;

    display: grid;     // create a 6x6 grid of equally sized rows and columns
    grid-template-rows: repeat(6, 1fr);
    grid-template-columns: repeat(6, 1fr);
    align-items: center; // images are special: they don't fit all the grid area

    @media only screen and (max-width: $bp-medium) {
      grid-column: full-start / full-end; // story pictures to fill up the entire row
      padding: 5rem;
    }
  }

  &__img--1 {
    width: 100%;
    grid-row: 2 / span 4;
    grid-column: 2 / span 4;
    box-shadow: 0 2rem 5rem rgba(#000, .1);

    @media only screen and (max-width: $bp-medium) {
      grid-row: 1 / -1;          // row height: the 6 grid rows
      grid-column: 1 / span 4;   
    }
  }

  &__img--2 {
    width: 115%;         // we want this image to overlap a little bit
    z-index: 10;
    grid-row: 4 / span 2;
    grid-column: 4 / span 3;
    box-shadow: 0 2rem 5rem rgba(#000, .2);

    @media only screen and (max-width: $bp-medium) {
      grid-row: 1 / -1;  
      width: 100%;
    }
  }

  &__content {
    background-color: $color-grey-light-1;
    grid-column: col-start 5 / full-end;

    padding: 6rem 7vw;     // viewport width unit for more truly responsive layouts

    @media only screen and (max-width: $bp-medium) {
      grid-column: full-start / full-end;  // story content to fill up the entire row
      grid-row: 5 / span 1;                // place the story content in be the 5th row
    }

    // Vertically align all elements inside the 'content' parent container /////////////////////////////
    // Using FLEXBOX (the Flexbox items will be: heading-3 + heading-2 + story__text + btn) 
    display: flex;          // make this Grid item (content) a flexbox container
    flex-direction: column; // main axis will be Y axis (vertical), cross axis will be X axis (horizontal)
    justify-content: center;// align items on the main axis (in this case the Y axis)
    align-items: flex-start;// align items on the cross axis (X): we don't want the button to stretch
    
    // Using CSS Grid (the Grid items will be: heading-3 + heading-2 + story__text + btn) 
    /*
    display: grid;          // make this Grid item (content) a Grid container
                            // we don't specify columns or rows, so every grid item in an implicit row 
    align-content: center;  // align entire tracks vertically to the grid container (default 'start')
    justify-items: start;   // align every grid item horizontally in its grid cell (default 'stretch')
    */
  }

  &__text {
    font-size: 1.5rem;
    font-style: italic;
    margin-bottom: 4rem;
  }
}